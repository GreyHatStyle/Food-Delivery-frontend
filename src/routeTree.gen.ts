/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RestaurantsLayoutRouteImport } from './routes/restaurants/layout'
import { Route as MenuPageRouteImport } from './routes/menu/page'
import { Route as homePageRouteImport } from './routes/(home)/page'
import { Route as RestaurantsFiltersPageRouteImport } from './routes/restaurants/filters/page'
import { Route as RestaurantsmainPagePageRouteImport } from './routes/restaurants/(main-page)/page'

const RestaurantsLayoutRoute = RestaurantsLayoutRouteImport.update({
  id: '/restaurants',
  path: '/restaurants',
  getParentRoute: () => rootRouteImport,
} as any)
const MenuPageRoute = MenuPageRouteImport.update({
  id: '/menu/',
  path: '/menu/',
  getParentRoute: () => rootRouteImport,
} as any)
const homePageRoute = homePageRouteImport.update({
  id: '/(home)/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const RestaurantsFiltersPageRoute = RestaurantsFiltersPageRouteImport.update({
  id: '/filters/',
  path: '/filters/',
  getParentRoute: () => RestaurantsLayoutRoute,
} as any)
const RestaurantsmainPagePageRoute = RestaurantsmainPagePageRouteImport.update({
  id: '/(main-page)/',
  path: '/',
  getParentRoute: () => RestaurantsLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/restaurants': typeof RestaurantsLayoutRouteWithChildren
  '/': typeof homePageRoute
  '/menu': typeof MenuPageRoute
  '/restaurants/': typeof RestaurantsmainPagePageRoute
  '/restaurants/filters': typeof RestaurantsFiltersPageRoute
}
export interface FileRoutesByTo {
  '/': typeof homePageRoute
  '/menu': typeof MenuPageRoute
  '/restaurants': typeof RestaurantsmainPagePageRoute
  '/restaurants/filters': typeof RestaurantsFiltersPageRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/restaurants': typeof RestaurantsLayoutRouteWithChildren
  '/(home)/': typeof homePageRoute
  '/menu/': typeof MenuPageRoute
  '/restaurants/(main-page)/': typeof RestaurantsmainPagePageRoute
  '/restaurants/filters/': typeof RestaurantsFiltersPageRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/restaurants'
    | '/'
    | '/menu'
    | '/restaurants/'
    | '/restaurants/filters'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/menu' | '/restaurants' | '/restaurants/filters'
  id:
    | '__root__'
    | '/restaurants'
    | '/(home)/'
    | '/menu/'
    | '/restaurants/(main-page)/'
    | '/restaurants/filters/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  RestaurantsLayoutRoute: typeof RestaurantsLayoutRouteWithChildren
  homePageRoute: typeof homePageRoute
  MenuPageRoute: typeof MenuPageRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/restaurants': {
      id: '/restaurants'
      path: '/restaurants'
      fullPath: '/restaurants'
      preLoaderRoute: typeof RestaurantsLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/menu/': {
      id: '/menu/'
      path: '/menu'
      fullPath: '/menu'
      preLoaderRoute: typeof MenuPageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(home)/': {
      id: '/(home)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof homePageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/restaurants/filters/': {
      id: '/restaurants/filters/'
      path: '/filters'
      fullPath: '/restaurants/filters'
      preLoaderRoute: typeof RestaurantsFiltersPageRouteImport
      parentRoute: typeof RestaurantsLayoutRoute
    }
    '/restaurants/(main-page)/': {
      id: '/restaurants/(main-page)/'
      path: '/'
      fullPath: '/restaurants/'
      preLoaderRoute: typeof RestaurantsmainPagePageRouteImport
      parentRoute: typeof RestaurantsLayoutRoute
    }
  }
}

interface RestaurantsLayoutRouteChildren {
  RestaurantsmainPagePageRoute: typeof RestaurantsmainPagePageRoute
  RestaurantsFiltersPageRoute: typeof RestaurantsFiltersPageRoute
}

const RestaurantsLayoutRouteChildren: RestaurantsLayoutRouteChildren = {
  RestaurantsmainPagePageRoute: RestaurantsmainPagePageRoute,
  RestaurantsFiltersPageRoute: RestaurantsFiltersPageRoute,
}

const RestaurantsLayoutRouteWithChildren =
  RestaurantsLayoutRoute._addFileChildren(RestaurantsLayoutRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  RestaurantsLayoutRoute: RestaurantsLayoutRouteWithChildren,
  homePageRoute: homePageRoute,
  MenuPageRoute: MenuPageRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
